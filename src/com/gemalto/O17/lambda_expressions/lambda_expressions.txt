Introduced in Java 8

Provides easier way to work with interfaces that only got one method (abstract)

Often used with anonymous classes
In anonymous classes, variables must be either final or a global variable of the container class,
But in Lambdas, there is no such restrictions, it works as a nested block.

It has 3 main parts:
    1. argument list : () is used only when there are no or more than 1 arguments. When only 1 argument, directly pass it like event->
    2. ->
    3. body

Functional interfaces have a single functionality to exhibit.
For example, a Comparable interface with a single method 'compareTo' is used for comparison purpose.
Java 8 has defined a lot of functional interfaces to be used extensively in lambda expressions.

Functional interfaces => lambda expressions

If Lambda contains more than 1 statement, then :
    1. We need to use return keyword, otherwise no need of return keyword
    2. Use {} and ;


Predicate argument (condition) is just (lambda) expression that match Predicate interface(functional)
                                                                      accept one parameter(type) and return boolean value based on the condition

Supplier Interface:
    Does not accept any arguments
    Returns a value